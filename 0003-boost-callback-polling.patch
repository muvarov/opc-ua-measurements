From 8ce62b8b76e92228d641e41122bf652ecb5092b6 Mon Sep 17 00:00:00 2001
From: Maxim Uvarov <maxim.uvarov@linaro.org>
Date: Thu, 21 Mar 2019 16:42:47 +0300
Subject: [PATCH 3/4] boost callback polling

remove OPC UA scheduler to take real small numbers:
Ticks per second 2.494165
Max ts diff is 96 ns, 0 us
Max ts diff is 96 ns, 0 us
Max ts diff is 96 ns, 0 us
Max ts diff is 96 ns, 0 us
Max ts diff is 96 ns, 0 us
Max ts diff is 95 ns, 0 us
Max ts diff is 96 ns, 0 us

Signed-off-by: Maxim Uvarov <maxim.uvarov@linaro.org>
---
 examples/pubsub/tutorial_pubsub_subscribe.c | 130 +++++++++++++++++++++++-----
 plugins/networking/ua_network_pubsub_udp.c  |   5 +-
 2 files changed, 113 insertions(+), 22 deletions(-)

diff --git a/examples/pubsub/tutorial_pubsub_subscribe.c b/examples/pubsub/tutorial_pubsub_subscribe.c
index 7210201..574111c 100644
--- a/examples/pubsub/tutorial_pubsub_subscribe.c
+++ b/examples/pubsub/tutorial_pubsub_subscribe.c
@@ -23,29 +23,84 @@
 #include <stdio.h>
 #include <signal.h>
 #include <stdlib.h>
+#include <time.h>
 
 UA_Boolean running = true;
+#if 0
 static void stopHandler(int sign) {
     UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "received ctrl-c");
     running = false;
 }
+#endif
 
 static UA_ByteString buffer = { 0, 0 };
 
-static void
+static inline uint64_t ns_ts(void)
+{
+       return __builtin_ia32_rdtsc();
+}
+
+
+const int NANO_SECONDS_IN_SEC = 1000000000;
+/* returns a static buffer of struct timespec with the time difference of ts1 and ts2
+   ts1 is assumed to be greater than ts2 */
+static inline struct timespec *TimeSpecDiff(struct timespec *ts1, struct timespec *ts2)
+{
+  static struct timespec ts;
+  ts.tv_sec = ts1->tv_sec - ts2->tv_sec;
+  ts.tv_nsec = ts1->tv_nsec - ts2->tv_nsec;
+  if (ts.tv_nsec < 0) {
+    ts.tv_sec--;
+    ts.tv_nsec += NANO_SECONDS_IN_SEC;
+  }
+  return &ts;
+}
+
+static double g_TicksPerNanoSec;
+
+static void CalibrateTicks(void)
+{
+  struct timespec begints, endts;
+  uint64_t begin = 0, end = 0;
+  clock_gettime(CLOCK_MONOTONIC, &begints);
+  begin = ns_ts();
+  uint64_t i;
+  for (i = 0; i < 1000000; i++); /* must be CPU intensive */
+  end = ns_ts();
+  clock_gettime(CLOCK_MONOTONIC, &endts);
+  struct timespec *tmpts = TimeSpecDiff(&endts, &begints);
+  uint64_t nsecElapsed = (uint64_t)tmpts->tv_sec * 1000000000LL + (uint64_t)tmpts->tv_nsec;
+  g_TicksPerNanoSec = (double)(end - begin)/(double)nsecElapsed;
+  printf("Ticks per socond %f\n", g_TicksPerNanoSec);
+}
+
+#define NUMBER_OF_EXECS 10000000
+
+static inline void 
 subscriptionPollingCallback(UA_Server *server, UA_PubSubConnection *connection) {
-    if (buffer.length == 0 && UA_ByteString_allocBuffer(&buffer, 512) != UA_STATUSCODE_GOOD) {
-        UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,
-                     "Message buffer allocation failed!");
-        return;
-    }
+    //UA_StatusCode retval;
+#if 0
+    uint64_t ts;
+    uint64_t prev_ts;
+    uint64_t max_ts = 0;
+ 
+    prev_ts = ns_ts();
+    for (uint64_t i = 0; i < NUMBER_OF_EXECS; i++) {
+	ts = ns_ts();
+	if ((ts - prev_ts) > max_ts)
+		max_ts = ts - prev_ts;
+	prev_ts = ts;
+    	connection->channel->receive(connection->channel, &buffer, NULL, 5);
+   }
 
-    /* Receive the message. Blocks for 5ms */
-    UA_StatusCode retval =
-        connection->channel->receive(connection->channel, &buffer, NULL, 5);
-    if(retval != UA_STATUSCODE_GOOD || buffer.length == 0) {
-        return;
-    }
+   //return max_ts;
+#endif
+#if 1
+    	connection->channel->receive(connection->channel, &buffer, NULL, 5);
+   	//if(retval != UA_STATUSCODE_GOOD || buffer.length == 0) {
+        //return;
+	//}
+  
 
     /* Decode the message */
     //UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
@@ -77,24 +132,35 @@ subscriptionPollingCallback(UA_Server *server, UA_PubSubConnection *connection)
             //UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
             //            "Message content: [Byte] \tReceived data: %i", value);
         } else if (currentType == &UA_TYPES[UA_TYPES_DATETIME]) {
-            //UA_DateTime value = *(UA_DateTime *)dsm->data.keyFrameData.dataSetFields[i].value.data;
-            //UA_DateTimeStruct receivedTime = UA_DateTime_toStruct(value);
-            //UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
-            //            "Message content: [DateTime] \t"
-            //            "Received date: %02i-%02i-%02i Received time: %02i:%02i:%02i",
-            //            receivedTime.year, receivedTime.month, receivedTime.day,
-            //            receivedTime.hour, receivedTime.min, receivedTime.sec);
+#if 0
+            UA_DateTime value = *(UA_DateTime *)dsm->data.keyFrameData.dataSetFields[i].value.data;
+            UA_DateTimeStruct receivedTime = UA_DateTime_toStruct(value);
+            UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
+                        "Message content: [DateTime] \t"
+                        "Received date: %02i-%02i-%02i Received time: %02i:%02i:%02i",
+                        receivedTime.year, receivedTime.month, receivedTime.day,
+                        receivedTime.hour, receivedTime.min, receivedTime.sec);
+#endif
         }
     }
 
  cleanup:
     UA_NetworkMessage_clear(&networkMessage);
+#endif
+}
+
+
+static inline void 
+__subscriptionPollingCallback(UA_Server *server, UA_PubSubConnection *connection) {
+    for (uint64_t i = 0; i < NUMBER_OF_EXECS; i++)
+	subscriptionPollingCallback(server, connection);
+
 }
 
 static int
 run(UA_String *transportProfile, UA_NetworkAddressUrlDataType *networkAddressUrl) {
-    signal(SIGINT, stopHandler);
-    signal(SIGTERM, stopHandler);
+    //signal(SIGINT, stopHandler);
+    //signal(SIGTERM, stopHandler);
 
     UA_ServerConfig *config = UA_ServerConfig_new_minimal(4801, NULL);
     /* Details about the PubSubTransportLayer can be found inside the
@@ -132,6 +198,7 @@ run(UA_String *transportProfile, UA_NetworkAddressUrlDataType *networkAddressUrl
      * messages. */
     UA_PubSubConnection *connection =
         UA_PubSubConnection_findConnectionbyId(server, connectionIdent);
+#if 0
     if(connection != NULL) {
         UA_StatusCode rv = connection->channel->regist(connection->channel, NULL, NULL);
         if (rv == UA_STATUSCODE_GOOD) {
@@ -143,6 +210,27 @@ run(UA_String *transportProfile, UA_NetworkAddressUrlDataType *networkAddressUrl
                            UA_StatusCode_name(rv));
         }
     }
+#else
+
+
+
+    if(connection != NULL) {
+        connection->channel->regist(connection->channel, NULL, NULL);
+    	UA_Server_run_startup(server);
+	UA_ByteString_allocBuffer(&buffer, 512);
+
+	subscriptionPollingCallback(server, connection);
+        CalibrateTicks();
+	while (1) {
+		uint64_t end_ts;
+		uint64_t start_ts = ns_ts();
+		__subscriptionPollingCallback(server, connection);
+		end_ts = ns_ts();
+        	printf("Max ts diff is %ld ns, %ld us\n", (end_ts - start_ts)/NUMBER_OF_EXECS/(unsigned int)g_TicksPerNanoSec, (end_ts - start_ts)/ NUMBER_OF_EXECS / 1000 / (unsigned int)g_TicksPerNanoSec);
+		 
+	}
+   } 
+#endif
 
     retval |= UA_Server_run(server, &running);
     UA_Server_delete(server);
diff --git a/plugins/networking/ua_network_pubsub_udp.c b/plugins/networking/ua_network_pubsub_udp.c
index fb9410a..d34650f 100644
--- a/plugins/networking/ua_network_pubsub_udp.c
+++ b/plugins/networking/ua_network_pubsub_udp.c
@@ -363,12 +363,14 @@ UA_PubSubChannelUDPMC_send(UA_PubSubChannel *channel, UA_ExtensionObject *transp
  */
 static UA_StatusCode
 UA_PubSubChannelUDPMC_receive(UA_PubSubChannel *channel, UA_ByteString *message, UA_ExtensionObject *transportSettigns, UA_UInt32 timeout){
+#if 0
     if(!(channel->state == UA_PUBSUB_CHANNEL_PUB || channel->state == UA_PUBSUB_CHANNEL_PUB_SUB)) {
         UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "PubSub Connection receive failed. Invalid state.");
         return UA_STATUSCODE_BADINTERNALERROR;
     }
+#endif
     UA_PubSubChannelDataUDPMC *channelConfigUDPMC = (UA_PubSubChannelDataUDPMC *) channel->handle;
-
+#if 0
     if(timeout > 0) {
         fd_set fdset;
         FD_ZERO(&fdset);
@@ -386,6 +388,7 @@ UA_PubSubChannelUDPMC_receive(UA_PubSubChannel *channel, UA_ByteString *message,
             return UA_STATUSCODE_BADINTERNALERROR;
         }
     }
+#endif
 
     if(channelConfigUDPMC->ai_family == PF_INET){
         ssize_t messageLength;
-- 
2.7.4

